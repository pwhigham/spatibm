plot(curr.pop,use.marks=F)
conflicts()
help(owin)
obs.win <- spatstat::owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=20,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,1),
allele.prop=c(0.5))
plot(curr.pop,use.marks=F)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data(ants)
plot(ants)
library(spatstat)
library(spatibm)
data(ants)
plot(ants)
devtools::load_all(".")
data(ants)
plot(ants)
help(single.step)
library(spatstat)
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")     curr.pop <- create_ibm_population(N=20,
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")   curr.pop <- create_ibm_population(N=20,
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
source("init.pop.r")
setwd("~/Programs/spatibmpackage/spatibm/R")
source("initial.pop.r")
dir()
source("initial_pop.R")
source("summary.R")
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=F)
library(spatstat)
library(spatibm)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
library(spatstat)
library(spatibm)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
pop <- create_ibm_population()
plot(pop,use.marks=FALSE)
library(spatstat)
#library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
data(ants)
plot(ants)
#pop <- create_ibm_population()
#plot(pop,use.marks=FALSE)
#library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
data(ants)
plot(ants)
#pop <- create_ibm_population()
#plot(pop,use.marks=FALSE)
#library(spatstat)
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
data(ants)
plot(ants)
#pop <- create_ibm_population()
#plot(pop,use.marks=FALSE)
unlink('~/Programs/spatibmpackage/spatibm/vignettes/ibm_cache', recursive = TRUE)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
source("C:/Rscripts/source.R")
})))
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
data(ants)
plot(ants)
#pop <- create_ibm_population()
#plot(pop,use.marks=FALSE)
dir()
pwd()
ls()
wd()
setwd()
getwd()
source(paste(getwd(),"/","initial_pop.R")
)
source(paste(getwd(),"/","initial_pop.R",sep=""))
knitr::kable(head(curr.pop$marks,5))
help(pch)
rep(10,2)
data(ants)
plot(ants)
ants$marks
plot(ants,pch=22)
plot(ants,pch=22,col=ants$marks)
plot(ants,pch=22,fg=ants$marks)
plot(ants,pch=22,bg=ants$marks)
plot(ants,pch=22,fg=ants$marks)
plot(ants,pch=22,bg=ants$marks)
plot(ants,pch=22,bg=ants$marks+1)
xx = sample(1:5,10)
help(sample)
sample(1:5,2)
sample(1:5,ants$n)
sample(1:5,ants$n,replace=TRUE)
xx = sample(1:5,ants$n,replace=TRUE)
plot(ants,pch=22,bg=xx)
xx
plot(ants,pch=22,bg=xx,fg=xx)
plot(ants,pch=22,bg=xx,fg=xx,col=xx)
plot(ants,pch=22,bg=xx)
xx = sample(1:10,ants$n,replace=TRUE)
xx
plot(ants,pch=22,bg=xx)
plot(ants,pch=22,bg=xx)
plot(ants,pch=22,bg=xx)
source("../R/initial_pop.R")
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=20,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,1),
allele.prop=c(0.5))
plot(curr.pop,use.marks=F)
plot(curr.pop,use.marks=F,pch=21)
plot(curr.pop,use.marks=F,pch=21,bg=2)
plot(curr.pop,use.marks=F,pch=21,bg=curr.pop$marks$sex)
plot(curr.pop,use.marks=F,pch=21,bg=as.numeric(curr.pop$marks$sex))
plot(curr.pop,use.marks=F,pch=21,bg=3)
points(curr.pop,pch=21,col=curr.pop$marks$sex)
points(curr.pop,pch=21,bg=curr.pop$marks$sex)
plot(curr.pop,use.marks=F,pch=21)
points(curr.pop,pch=21,bg=curr.pop$marks$sex)
class(curr.pop)
hist(curr.pop$marks$age)
hist(curr.pop$marks$age)
hist(curr.pop$marks$age)
nrow(curr.pop)
nrow(curr.pop$marks)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
})))
nrow(curr.pop)
nrow(curr.pop$marks)
curr.pop
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=40,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
curr.pop
hist(curr.pop$marks$age)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
})))
devtools::document()
help(convex.home.range)
devtools::document()
help(convex.home.range)
devtools::document()
help(convex.home.range)
help(rnorm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
source("../R/movement.R")
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=40,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
par(mar=c(3,3,2,0)) # rescale figure border
hist(curr.pop$marks$age,main="Age Distribution")
knitr::kable(head(curr.pop$marks,5))
obs.win <- owin(xrange=c(-30,30), yrange=c(-30,30),unitname="metres")
curr.pop$window <- obs.win
curr.pop
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
source("../R/movement.R")
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=40,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
par(mar=c(3,3,2,0)) # rescale figure border
hist(curr.pop$marks$age,main="Age Distribution")
knitr::kable(head(curr.pop$marks,5))
obs.win <- owin(xrange=c(-30,30), yrange=c(-30,30),unitname="metres")
curr.pop$window <- obs.win
curr.pop
m.age.class <- c(5,Inf)
m.move <- list(c(1,0.1),c(5,2))
f.age.class <- Inf
f.move <- list(c(5,2))
m.table <- movement.table(m.age.class,m.move,f.age.class,f.move)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
source("../R/movement.R")
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=40,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
par(mar=c(3,3,2,0)) # rescale figure border
hist(curr.pop$marks$age,main="Age Distribution")
knitr::kable(head(curr.pop$marks,5))
obs.win <- owin(xrange=c(-30,30), yrange=c(-30,30),unitname="metres")
curr.pop$window <- obs.win
curr.pop
m.age.class <- c(5,Inf)
m.move <- list(c(1,0.1),c(5,2))
f.age.class <- Inf
f.move <- list(c(5,2))
m.table <- movement.table(m.age.class,m.move,f.age.class,f.move)
source('~/Programs/spatibmpackage/spatibm/R/survival.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
source("../R/movement.R")
source("../R/survival.R")
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=100,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
par(mar=c(3,3,2,0)) # rescale figure border
hist(curr.pop$marks$age,main="Age Distribution")
knitr::kable(head(curr.pop$marks,5))
obs.win <- owin(xrange=c(-30,30), yrange=c(-30,30),unitname="metres")
curr.pop$window <- obs.win
curr.pop
m.age.class <- c(5,Inf)
m.move <- list(c(1,0.1),c(5,2))
f.age.class <- Inf
f.move <- list(c(5,2))
m.table <- movement.table(m.age.class,m.move,f.age.class,f.move)
m.age.class <- Inf
m.move <- list(c(2,1))
m.table <- movement.table(m.age.class,m.move,m.age.class,m.move)
areas <- convex.home.range(curr.pop,m.table,timesteps=5)
hist(areas,main="Home Range Area",breaks=10,xlab=expression(paste("Area ",m^{2})))
mf.age.class <- c(5,40,Inf) # Same description for males and females
mf.survive <- list(0.8,0.95,0.1)
survive.table <- survival.table(mf.age.class,mf.survive,mf.age.class,mf.survive)
devtools::document()
help(breed)
help(breed)
devtools::document()
help(breed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
library(spatstat)
source("../R/initial_pop.R")
source("../R/movement.R")
source("../R/survival.R")
source("../R/breeding.R")
})))
obs.win <- owin(xrange=c(-10,10), yrange=c(-10,10),unitname="metres")
curr.pop <- create_ibm_population(N=100,
spat.layout="random",
obs.win=obs.win,
prob.females=0.5,
age.distribution=c(10,3),
allele.prop=c(0.5))
par(mar=c(0,0,1,0)) # rescale figure border
plot(curr.pop,use.marks=FALSE,main="Initial Pop Example")
points(curr.pop,pch=21,bg=curr.pop$marks$sex) # Colour points
par(mar=c(3,3,2,0)) # rescale figure border
hist(curr.pop$marks$age,main="Age Distribution")
knitr::kable(head(curr.pop$marks,5))
obs.win <- owin(xrange=c(-30,30), yrange=c(-30,30),unitname="metres")
curr.pop$window <- obs.win
curr.pop
m.age.class <- c(5,Inf)
m.move <- list(c(1,0.1),c(5,2))
f.age.class <- Inf
f.move <- list(c(5,2))
m.table <- movement.table(m.age.class,m.move,f.age.class,f.move)
m.age.class <- Inf
m.move <- list(c(2,1))
m.table <- movement.table(m.age.class,m.move,m.age.class,m.move)
areas <- convex.home.range(curr.pop,m.table,timesteps=5)
hist(areas,main="Home Range Area",breaks=10,xlab=expression(paste("Area ",m^{2})))
mf.age.class <- c(5,40,Inf) # Same description for males and females
mf.survive <- list(0.8,0.95,0.1)
survive.table <- survival.table(mf.age.class,mf.survive,mf.age.class,mf.survive)
plot.survival(p.seq=seq(from=1,to=0.2,by=-0.1),years=1:20,ylim=c(0,1),cex=0.8)
plot.survival(p.seq=seq(from=1,to=0.5,by=-0.1),years=1:10,ylim=c(0,0.6))
#
# The breed.table and max.dist variable will be used in the model
#
mf.age.class <- c(5,40,Inf) # Same description for males and females
mf.breed <- list(0,0.95,0.1)
breed.table <- breeding.table(mf.age.class,mf.breed,
mf.age.class,mf.breed,
fecund=c(5,2), # Mean 5 children
displace=c(3,2)) # Offset from mid-point
max.dist <- 5.0 # Maximum distance between pairs
obs.win
crowding.table
c.table
age.class <- c(5,Inf) # Same crowding for males and females
den.class <- c(0.5,3,Inf)
crowd.prob <- c(1,0.9,0.1,1,0.8,0.01) # age class x den class
c.table <- crowding.table(age.class,den.class,crowd.prob,
age.class,den.class,crowd.prob)
par(mar=c(4,4,3,1))
c.table
plot.crowding.table(c.table)
devtools::document()
# Create a window centred on (0,0)
win <- owin(xrange=c(-2,2),yrange=c(-2,2),unitname="metres")
plot.density.example(win,num.pts=10,sigma=1)
knit_with_parameters('~/Programs/spatibmpackage/spatibm/vignettes/ibm.Rmd')
unlink('vignettes/ibm_cache', recursive = TRUE)
knit_with_parameters('~/Programs/spatibmpackage/spatibm/vignettes/ibm.Rmd')
help(render)
devtools::document()
library(spatstat)
devtools::document()
model.run
devtools::document()
library(spatstat)
library(raster)
source("habitat.r")
#############################################
# Spatial Individual-based Model
#############################################
# habitat.r
#############
################################################################
# Example operations to define the habitat pixel image
##############################################################
#' Define a circular habitat
#' @description Define a circular habitat using an exponential decay function.
#' The origin(0,0) has value 1, with habitat locations away from the origin
#' decaying in value towards zero.
#'@param x x coordinate
#'@param y y coordinate
#'@param b Decay rate for any habitat location defined by the distance from origin (0,0)
#'@return Habitat value for each location.  This function is used in conjunction with
#'\code{\link[spatstat]{as.im}} to produce an image that defines the habitat.
#'@examples
#' # Example circle habitat for a rectangular window.
#' # hab.win is the habitat window
#' hab.win <- owin(c(-50,50),c(-50,50),unitname="metres")
#' Z <- as.im(circle.habitat,hab.win,b=0.0005)
#' plot(Z)
#'
circle.habitat <- function(x,y,b)
{
d <- x^2 + y^2
exp(-b*d)
}
#' Define a circular habitat with constant value
#'@description Create a circular habitat with a value of \code{inside} within a defined distance
#' from the origin(0,0), and \code{outside} elsewhere.
#'@param x x coordinate
#'@param y y coordinate
#'@param dist.inside Distance from the origin (0,0) with habitat value inside
#'@param inside Value of habitat within dist.inside from the origin
#'@param outside Value of habitat further than dist.inside from the origin
#'@return Habitat value for each location.  This function is used in conjunction with
#'\code{\link[spatstat]{as.im}} to produce an image that defines the habitat.
#'@examples
#' hab.win <- owin(c(-50,50),c(-50,50),unitname="metres")
#' Z <- as.im(circle.only,hab.win,dist.inside=10,inside=0.8,outside=0.2)
#' plot(Z)
circle.only <- function(x,y,dist.inside=50,inside=1.0,outside=0.0)
{
d <- sqrt(x^2 + y^2)
ifelse(d < dist.inside,inside,outside)
}
######################################################################################
# points.habitat
# IN: pts - a matrix of rows of points representing the centre of good habitat
# If (x,y) is within the threshold.dist of any of the pts then the location is given
# a value of inside, otherwise outside.  Alternatively, could do it as a bandwidth like
# circle habitat...
##################################################################################
loc.dist <- function(x,pts,dist.inside,inside,outside)
{
pts <- rbind(pts,x)
dd <- as.matrix(dist(pts))
diag(dd) <- Inf
ifelse((min(dd[nrow(dd),]) < dist.inside),inside,outside)
}
#' Define a set of locations with a circular habitat
#' @description Given a set of points (x,y), create a circular habitat centred on
#' each point, with value \code{inside} within \code{dist.inside} and value \code{outside} otherwise.
#' @param x x coordinate
#' @param y y coordinate
#' @param pts Two column matrix or dataframe of x and y coordinates for a set of points
#' @param dist.inside Distance from each point to set value \code{inside}
#' @param inside Value to set for locations within \code{dist.inside} of a point
#' @param outside Value to set for locations further than \code{dist.inside} from a point.
#' @return Habitat value for each location.  This function is used in conjunction with
#'\code{\link[spatstat]{as.im}} to produce an image that defines the habitat.
#'@examples
#' pts <- matrix(data=c(-60,3,-80,-77,30,30,25,10,-40,-30),ncol=2,byrow=T)
#' hab.win <- owin(c(-100,100),c(-100,100),unitname="metres")
#' Z <- as.im(points.habitat,hab.win,pts,dist.inside=20,inside=1.0,outside=0.9)
#' plot(Z)
points.habitat <- function(x,y,pts,dist.inside,inside=1.0,outside=0.8)
{
# x,y are the vectors of all points
allxy <- as.matrix(cbind(x,y))
apply(allxy,1,loc.dist,pts,dist.inside,inside,outside)
}
pop$window <- owin(xrange=c(-100,100), yrange=c(-100,100),unitname="metres")
hab.surface <- as.im(circle.habitat,pop$window,b=0.00001)
h.win = owin(xrange=c(-100,100), yrange=c(-100,100),unitname="metres")
hab.surface <- as.im(circle.habitat,h.win,b=0.00001)
plot(hab.surface)
hab.surface <- as.im(circle.habitat,h.win,b=0.0001)
plot(hab.surface)
x = 2
y = 3
((x > 2) | (y < 4))
((x > 2) | (y < 3))
((x > 1) | (y < 3))
((x > 1) | (y == 3))
((x > 5) | (y == 3))
((x > 5) | (y != 3))
ls
ls()
ls
pwd
ls
ls()
